name: Static Checks & Quality Assurance

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  spelling-check:
    name: Spelling & Grammar Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Run spelling check
        run: npm run spell-check

  html-validation:
    name: HTML Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Install Jekyll
        run: |
          gem install jekyll bundler
          bundle install

      - name: Build Jekyll site
        run: bundle exec jekyll build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Validate HTML
        run: npm run html-validate

  css-validation:
    name: CSS Validation & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Lint CSS
        run: npm run css-lint

  markdown-linting:
    name: Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Lint Markdown
        run: npm run markdown-lint

  yaml-validation:
    name: YAML Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install yamllint
        run: pip install yamllint

      - name: Validate YAML
        run: yamllint -c .yamllint .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Install Jekyll
        run: |
          gem install jekyll bundler
          bundle install

      - name: Build Jekyll site
        run: bundle exec jekyll build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Run accessibility tests
        run: |
          # Test main pages for accessibility
          npx pa11y --standard WCAG2AA --reporter cli _site/index.html || true
          npx pa11y --standard WCAG2AA --reporter cli _site/publications/index.html || true
          npx pa11y --standard WCAG2AA --reporter cli _site/talks/index.html || true

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Install Jekyll
        run: |
          gem install jekyll bundler
          bundle install

      - name: Build Jekyll site
        run: bundle exec jekyll build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Run Lighthouse CI
        run: |
          npx @lhci/cli@0.12.x autorun --upload.target=temporary-public-storage || true

  link-check:
    name: Link Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Install Jekyll
        run: |
          gem install jekyll bundler
          bundle install

      - name: Build Jekyll site
        run: bundle exec jekyll build

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Node.js dependencies
        run: npm install

      - name: Check links
        run: |
          npx lychee _site/ --verbose || true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Install Jekyll
        run: |
          gem install jekyll bundler
          bundle install

      - name: Build Jekyll site
        run: bundle exec jekyll build

      - name: Check build output
        run: |
          if [ ! -d "_site" ]; then
            echo "Build failed: _site directory not created"
            exit 1
          fi

          if [ ! -f "_site/index.html" ]; then
            echo "Build failed: index.html not generated"
            exit 1
          fi

          echo "Build successful: Site generated correctly"
          ls -la _site/

  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs:
      [
        spelling-check,
        html-validation,
        css-validation,
        markdown-linting,
        yaml-validation,
        security-scan,
        accessibility-check,
        performance-check,
        link-check,
        build-test,
      ]
    if: always()
    steps:
      - name: Generate Quality Report
        run: |
          echo "## 🔍 Quality Assurance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Spelling & Grammar | ${{ needs.spelling-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| HTML Validation | ${{ needs.html-validation.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CSS Validation | ${{ needs.css-validation.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Linting | ${{ needs.markdown-linting.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Validation | ${{ needs.yaml-validation.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Check | ${{ needs.accessibility-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Check | ${{ needs.performance-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Link Check | ${{ needs.link-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Test | ${{ needs.build-test.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Checks:** 10" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed:** $(echo '${{ needs.spelling-check.result == 'success' && '1' || '0' }} ${{ needs.html-validation.result == 'success' && '1' || '0' }} ${{ needs.css-validation.result == 'success' && '1' || '0' }} ${{ needs.markdown-linting.result == 'success' && '1' || '0' }} ${{ needs.yaml-validation.result == 'success' && '1' || '0' }} ${{ needs.security-scan.result == 'success' && '1' || '0' }} ${{ needs.accessibility-check.result == 'success' && '1' || '0' }} ${{ needs.performance-check.result == 'success' && '1' || '0' }} ${{ needs.link-check.result == 'success' && '1' || '0' }} ${{ needs.build-test.result == 'success' && '1' || '0' }}' | tr ' ' '+' | bc)" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $(echo '10 - $(echo '${{ needs.spelling-check.result == 'success' && '1' || '0' }} ${{ needs.html-validation.result == 'success' && '1' || '0' }} ${{ needs.css-validation.result == 'success' && '1' || '0' }} ${{ needs.markdown-linting.result == 'success' && '1' || '0' }} ${{ needs.yaml-validation.result == 'success' && '1' || '0' }} ${{ needs.security-scan.result == 'success' && '1' || '0' }} ${{ needs.accessibility-check.result == 'success' && '1' || '0' }} ${{ needs.performance-check.result == 'success' && '1' || '0' }} ${{ needs.link-check.result == 'success' && '1' || '0' }} ${{ needs.build-test.result == 'success' && '1' || '0' }}' | tr ' ' '+' | bc)" >> $GITHUB_STEP_SUMMARY
